package com.syedbaqirali.materialfirst.controllers;

import javax.ws.rs.Consumes;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

/**
 * @author SBA
 *
 */

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.syedbaqirali.materialfirst.entities.User;
import com.syedbaqirali.materialfirst.repositories.UserRepository;

@Controller // This means that this class is a Controller
@CrossOrigin(origins = "https://localhost:4200")
@RequestMapping(path = "/api") // This means URL's start with /demo (after Application path)
public class UserController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path = "/users/add")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON) // Map ONLY POST Requests
	public @ResponseBody Response addNewUser(@RequestBody User user) {

		return Response.status(Response.Status.OK).entity(userRepository.save(user)).build();
	}

	@PostMapping(path = "/users/update")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON) // Map ONLY POST Requests
	public @ResponseBody Response updateUser(@RequestBody User user) {

		return Response.status(Response.Status.OK).entity(userRepository.save(user)).build();
	}

	@PostMapping(path = "/users/delete")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON) // Map ONLY POST Requests
	public @ResponseBody Response deleteUser(@RequestBody User user) {
		userRepository.delete(user);
		return Response.status(Response.Status.OK).build();
	}

	@GetMapping(path = "/users/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	/*
	 * @GetMapping(path = "/users/{userId}") public @ResponseBody Response
	 * getUser(@PathParam("userId") String userId) { // This returns a JSON or XML
	 * with the users userId = userId == null ? "2" : userId; return
	 * Response.status(Response.Status.OK).entity(userRepository.findById(Integer.
	 * parseInt(userId))).build(); }
	 */

	@GetMapping("/users/{userId}")
	@ResponseBody
	public Response getUserById(@PathVariable String userId) {
		userId = userId == null ? "2" : userId;
		return Response.status(Response.Status.OK).entity(userRepository.findById(Integer.parseInt(userId))).build();
	}
}